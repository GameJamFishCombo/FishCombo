//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""d2c5d728-28fd-4a4d-9303-936bb5aadfb3"",
            ""actions"": [
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""7540b9b3-a2ee-419b-a38b-4d19fce511cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""488a67bf-177a-4099-82b0-0cb1c6305c24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""748540e8-beae-4991-a5a9-03eedd610f62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""cb641933-d7b1-4621-a537-7f80b71d0c63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""ff55aaa8-fc59-430e-98c2-13945ba03c15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability1"",
                    ""type"": ""Button"",
                    ""id"": ""a6d4c7f5-57ed-4d28-bdac-cd7f4a75b0a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability2"",
                    ""type"": ""Button"",
                    ""id"": ""d8551790-d961-43cc-a70a-52e96f1181f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability3"",
                    ""type"": ""Button"",
                    ""id"": ""316a7848-144d-48a3-8945-e699902a042d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ccb83e1-1322-4f77-9171-6c06b92fcdfa"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d107647c-ce8a-49d6-bc47-037f992a8b08"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f817cc84-e7d6-44f8-8680-245b21c880eb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Ability1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12237e14-9b13-4ebd-8838-a6476267abc6"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Ability2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0dcf664-e7e8-476b-9cb8-f0c3adb10663"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Ability3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c72ad5f-f340-4073-822a-7c33f26cb57b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbbec652-dcc9-4374-b3cd-7f1b671bf46a"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72df9e75-d9d8-43e6-b8d2-cab9d854d03a"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_MoveLeft = m_Controller.FindAction("MoveLeft", throwIfNotFound: true);
        m_Controller_MoveRight = m_Controller.FindAction("MoveRight", throwIfNotFound: true);
        m_Controller_MoveUp = m_Controller.FindAction("MoveUp", throwIfNotFound: true);
        m_Controller_MoveDown = m_Controller.FindAction("MoveDown", throwIfNotFound: true);
        m_Controller_Fire = m_Controller.FindAction("Fire", throwIfNotFound: true);
        m_Controller_Ability1 = m_Controller.FindAction("Ability1", throwIfNotFound: true);
        m_Controller_Ability2 = m_Controller.FindAction("Ability2", throwIfNotFound: true);
        m_Controller_Ability3 = m_Controller.FindAction("Ability3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_MoveLeft;
    private readonly InputAction m_Controller_MoveRight;
    private readonly InputAction m_Controller_MoveUp;
    private readonly InputAction m_Controller_MoveDown;
    private readonly InputAction m_Controller_Fire;
    private readonly InputAction m_Controller_Ability1;
    private readonly InputAction m_Controller_Ability2;
    private readonly InputAction m_Controller_Ability3;
    public struct ControllerActions
    {
        private @Controls m_Wrapper;
        public ControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_Controller_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_Controller_MoveRight;
        public InputAction @MoveUp => m_Wrapper.m_Controller_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Controller_MoveDown;
        public InputAction @Fire => m_Wrapper.m_Controller_Fire;
        public InputAction @Ability1 => m_Wrapper.m_Controller_Ability1;
        public InputAction @Ability2 => m_Wrapper.m_Controller_Ability2;
        public InputAction @Ability3 => m_Wrapper.m_Controller_Ability3;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @MoveLeft.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveLeft;
                @MoveRight.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveRight;
                @MoveUp.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveUp;
                @MoveDown.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMoveDown;
                @Fire.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnFire;
                @Ability1.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility1;
                @Ability1.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility1;
                @Ability1.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility1;
                @Ability2.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility2;
                @Ability2.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility2;
                @Ability2.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility2;
                @Ability3.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility3;
                @Ability3.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility3;
                @Ability3.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAbility3;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Ability1.started += instance.OnAbility1;
                @Ability1.performed += instance.OnAbility1;
                @Ability1.canceled += instance.OnAbility1;
                @Ability2.started += instance.OnAbility2;
                @Ability2.performed += instance.OnAbility2;
                @Ability2.canceled += instance.OnAbility2;
                @Ability3.started += instance.OnAbility3;
                @Ability3.performed += instance.OnAbility3;
                @Ability3.canceled += instance.OnAbility3;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IControllerActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnAbility1(InputAction.CallbackContext context);
        void OnAbility2(InputAction.CallbackContext context);
        void OnAbility3(InputAction.CallbackContext context);
    }
}
